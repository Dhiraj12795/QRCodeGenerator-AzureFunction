{"ast":null,"code":"var _jsxFileName = \"D:\\\\QRCodeGenerator\\\\QRCodeGenerator-AzureFunction\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst express = require('express');\nconst app = express();\nconst qrCodeRoutes = require('./routes/qrCodeGenerator'); // Import your routes\n\napp.use('/', qrCodeRoutes); // Use the routes\n\nfunction App() {\n  _s();\n  const [text, setText] = useState('');\n  const [qrCode, setQrCode] = useState('');\n  const generateQRCode = async () => {\n    const response = await fetch(`http://localhost:3001/api/GenerateQRCode?text=${encodeURIComponent(text)}`);\n\n    // Ensure the response is a blob, which can represent the JPEG image\n    const blob = await response.blob();\n\n    // Convert the blob to a URL to display as an image\n    const url = URL.createObjectURL(blob);\n    setQrCode(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QR Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Enter text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateQRCode,\n      children: \"Generate QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), qrCode && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: qrCode,\n      alt: \"Generated QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mw/iKoGwEtn/BmZeWJHkn2Qyx10=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","express","require","app","qrCodeRoutes","use","App","_s","text","setText","qrCode","setQrCode","generateQRCode","response","fetch","encodeURIComponent","blob","url","URL","createObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/QRCodeGenerator/QRCodeGenerator-AzureFunction/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nconst express = require('express');\r\nconst app = express();\r\nconst qrCodeRoutes = require('./routes/qrCodeGenerator'); // Import your routes\r\n\r\napp.use('/', qrCodeRoutes); // Use the routes\r\n\r\nfunction App() {\r\n  const [text, setText] = useState('');\r\n  const [qrCode, setQrCode] = useState('');\r\n\r\n  const generateQRCode = async () => {\r\n    const response = await fetch(`http://localhost:3001/api/GenerateQRCode?text=${encodeURIComponent(text)}`);\r\n    \r\n    // Ensure the response is a blob, which can represent the JPEG image\r\n    const blob = await response.blob();\r\n    \r\n    // Convert the blob to a URL to display as an image\r\n    const url = URL.createObjectURL(blob);\r\n    setQrCode(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>QR Code Generator</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Enter text\"\r\n      />\r\n      <button onClick={generateQRCode}>Generate QR Code</button>\r\n      {qrCode && <img src={qrCode} alt=\"Generated QR Code\" />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnB,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,GAAG,GAAGF,OAAO,CAAC,CAAC;AACrB,MAAMG,YAAY,GAAGF,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC;;AAE1DC,GAAG,CAACE,GAAG,CAAC,GAAG,EAAED,YAAY,CAAC,CAAC,CAAC;;AAE5B,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMc,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiDC,kBAAkB,CAACP,IAAI,CAAC,EAAE,CAAC;;IAEzG;IACA,MAAMQ,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAElC;IACA,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;IACrCL,SAAS,CAACM,GAAG,CAAC;EAChB,CAAC;EAED,oBACEjB,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA;MAAAqB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BzB,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEnB,IAAK;MACZoB,QAAQ,EAAGC,CAAC,IAAKpB,OAAO,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACzCI,WAAW,EAAC;IAAY;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACFzB,OAAA;MAAQgC,OAAO,EAAEpB,cAAe;MAAAS,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzDf,MAAM,iBAAIV,OAAA;MAAKiC,GAAG,EAAEvB,MAAO;MAACwB,GAAG,EAAC;IAAmB;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV;AAAClB,EAAA,CA5BQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}