{"ast":null,"code":"import React,{useState}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const express=require('express');const app=express();const qrCodeRoutes=require('./routes/qrCodeGenerator');// Import your routes\napp.use('/',qrCodeRoutes);// Use the routes\nfunction App(){const[text,setText]=useState('');const[qrCode,setQrCode]=useState('');const generateQRCode=async()=>{const response=await fetch(`http://localhost:3001/api/GenerateQRCode?text=${encodeURIComponent(text)}`);// Ensure the response is a blob, which can represent the JPEG image\nconst blob=await response.blob();// Convert the blob to a URL to display as an image\nconst url=URL.createObjectURL(blob);setQrCode(url);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"QR Code Generator\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:text,onChange:e=>setText(e.target.value),placeholder:\"Enter text\"}),/*#__PURE__*/_jsx(\"button\",{onClick:generateQRCode,children:\"Generate QR Code\"}),qrCode&&/*#__PURE__*/_jsx(\"img\",{src:qrCode,alt:\"Generated QR Code\"})]});}export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","express","require","app","qrCodeRoutes","use","App","text","setText","qrCode","setQrCode","generateQRCode","response","fetch","encodeURIComponent","blob","url","URL","createObjectURL","className","children","type","value","onChange","e","target","placeholder","onClick","src","alt"],"sources":["D:/QRCodeGenerator/QRCodeGenerator-AzureFunction/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nconst express = require('express');\r\nconst app = express();\r\nconst qrCodeRoutes = require('./routes/qrCodeGenerator'); // Import your routes\r\n\r\napp.use('/', qrCodeRoutes); // Use the routes\r\n\r\nfunction App() {\r\n  const [text, setText] = useState('');\r\n  const [qrCode, setQrCode] = useState('');\r\n\r\n  const generateQRCode = async () => {\r\n    const response = await fetch(`http://localhost:3001/api/GenerateQRCode?text=${encodeURIComponent(text)}`);\r\n    \r\n    // Ensure the response is a blob, which can represent the JPEG image\r\n    const blob = await response.blob();\r\n    \r\n    // Convert the blob to a URL to display as an image\r\n    const url = URL.createObjectURL(blob);\r\n    setQrCode(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>QR Code Generator</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Enter text\"\r\n      />\r\n      <button onClick={generateQRCode}>Generate QR Code</button>\r\n      {qrCode && <img src={qrCode} alt=\"Generated QR Code\" />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACnB,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAAC,SAAS,CAAC,CAClC,KAAM,CAAAC,GAAG,CAAGF,OAAO,CAAC,CAAC,CACrB,KAAM,CAAAG,YAAY,CAAGF,OAAO,CAAC,0BAA0B,CAAC,CAAE;AAE1DC,GAAG,CAACE,GAAG,CAAC,GAAG,CAAED,YAAY,CAAC,CAAE;AAE5B,QAAS,CAAAE,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACa,MAAM,CAAEC,SAAS,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAExC,KAAM,CAAAe,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iDAAiDC,kBAAkB,CAACP,IAAI,CAAC,EAAE,CAAC,CAEzG;AACA,KAAM,CAAAQ,IAAI,CAAG,KAAM,CAAAH,QAAQ,CAACG,IAAI,CAAC,CAAC,CAElC;AACA,KAAM,CAAAC,GAAG,CAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC,CACrCL,SAAS,CAACM,GAAG,CAAC,CAChB,CAAC,CAED,mBACEhB,KAAA,QAAKmB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBtB,IAAA,OAAAsB,QAAA,CAAI,mBAAiB,CAAI,CAAC,cAC1BtB,IAAA,UACEuB,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEf,IAAK,CACZgB,QAAQ,CAAGC,CAAC,EAAKhB,OAAO,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACzCI,WAAW,CAAC,YAAY,CACzB,CAAC,cACF5B,IAAA,WAAQ6B,OAAO,CAAEhB,cAAe,CAAAS,QAAA,CAAC,kBAAgB,CAAQ,CAAC,CACzDX,MAAM,eAAIX,IAAA,QAAK8B,GAAG,CAAEnB,MAAO,CAACoB,GAAG,CAAC,mBAAmB,CAAE,CAAC,EACpD,CAAC,CAEV,CAEA,cAAe,CAAAvB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}